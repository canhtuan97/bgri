pragma solidity ^0.4.25;
contract Migrations {
struct History { 
string  time;
string  Rest;
}
struct Product { 
string  time;
string  name;
string  time_start;
string  time_estimate;
string  time_thuhoach;
string  dia_diem;
}
Product product;
History history;
uint256 count = 0;
uint256 status = 1;
uint256 submit = 1;
mapping(uint256 => Product) public products; 
mapping(uint256 => History) public historys;
  function getCount() public view returns(uint256){ 
return count;
}
function getStatus() public view returns(uint256){ 
return status;
}
function setSubmit()public {
submit++;
}
  function getSubmit() public view returns(uint256){ 
return submit;
}
function setProduct(uint256 id ,string memory time,string memory name,string memory time_start,string memory time_estimate,string memory time_thuhoach,string memory dia_diem)public {
 product = Product(time,name,time_start,time_estimate,time_thuhoach,dia_diem);
if (status == 1){
products[id] = product;
status++ ;}
}
function setHistory(uint256 id ,string memory time,string memory Rest)public {


 if(submit == 1){ 
count++ ;
history = History(time,Rest);
historys[id] = history;
}
}
function getProduct(uint256 id) public view 
returns ( string memory , string memory , string memory , string memory , string memory , string memory )
{string memory _time = products[id].time;
string memory _name = products[id].name;
string memory _time_start = products[id].time_start;
string memory _time_estimate = products[id].time_estimate;
string memory _time_thuhoach = products[id].time_thuhoach;
string memory _dia_diem = products[id].dia_diem;
return (_time,_name,_time_start,_time_estimate,_time_thuhoach,_dia_diem);

}
function getHistory(uint256 id) public view 
returns ( string memory , string memory )
{string memory _time = historys[id].time;
string memory _Rest = historys[id].Rest;
return (_time,_Rest);

}
}